{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E..\nTime: 0.028\nThere was 1 failure:\n1) aged_brie_actually_increases_in_quality_when_geting_older(ItemTest)\njava.lang.AssertionError: expected:<11> but was:<9>\n\tat org.junit.Assert.fail(Assert.java:92)\n\tat org.junit.Assert.failNotEquals(Assert.java:646)\n\tat org.junit.Assert.assertEquals(Assert.java:127)\n\tat org.junit.Assert.assertEquals(Assert.java:471)\n\tat org.junit.Assert.assertEquals(Assert.java:455)\n\tat ItemTest.aged_brie_actually_increases_in_quality_when_geting_older(ItemTest.java:42)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 3,  Failures: 1\n\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","Item.java":"\npublic class Item {\n    private String itemType;\n    private int sellIn;\n    private int quality;\n    \n    public Item(String itemType, int sellIn, int quality){\n        this.itemType = itemType;\n        this.sellIn = sellIn;\n        this.quality = quality;\n    }\n\n    public void updateQuality(){\n        if(this.sellIn < 0){\n            this.quality -=2;\n        }else{\n            this.quality -= 1; \n        }\n        this.sellIn -= 1;\n\n    }\n\n    public int getSellIn(){\n        return this.sellIn;\n    }\n\n    public int getQuality(){\n        return this.quality;\n    }\n}","ItemTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class ItemTest {\n\n    @Test\n    public void at_the_end_of_each_day_our_sytem_lowers_both_values_for_each_normal_item(){\n        //Given\n        Item item = new Item(\"normal\", 14, 10);\n\n        //When\n        item.updateQuality();\n\n        //Then\n        assertEquals(13,item.getSellIn());\n        assertEquals(9,item.getQuality());\n    }\n    \n    @Test\n    public void once_the_sell_by_date_has_passed_quality_degrades_twice_as_fast(){\n        //Given\n        Item item = new Item(\"normal\", -5, 10);\n\n        //When\n        item.updateQuality();\n\n        //Then\n        assertEquals(-6, item.getSellIn());\n        assertEquals(8, item.getQuality());\n    }\n\n    @Test\n    public void aged_brie_actually_increases_in_quality_when_geting_older(){\n        //Given\n        Item item = new Item(\"aged_brie\", 14, 10);\n\n        //When\n        item.updateQuality();\n\n        //Then\n        assertEquals(13,item.getSellIn());\n        assertEquals(11,item.getQuality());    \n    }\n\n\n    //TODO\n}"}