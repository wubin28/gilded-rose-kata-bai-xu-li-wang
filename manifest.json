{"HikerTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class HikerTest {\n\n    @Test\n    public void after_update_lower_both_values_at_each_day(){\n        Item item = new Item(\"normal\",8,10);\n        item.updateQuality();\n        \n       // assertEquals(new Item(\"noraml\",7,9),item);\n        assertEquals(9,item.getSellIn());\n        \n    }\n}\n","cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"HikerTest.java:8: error: constructor Item in class Item cannot be applied to given types;\n        Item item = new Item(\"normal\",8,10);\n                    ^\n  required: no arguments\n  found: String,int,int\n  reason: actual and formal argument lists differ in length\nHikerTest.java:9: error: cannot find symbol\n        item.updateQuality();\n            ^\n  symbol:   method updateQuality()\n  location: variable item of type Item\nHikerTest.java:12: error: cannot find symbol\n        assertEquals(9,item.getSellIn());\n                           ^\n  symbol:   method getSellIn()\n  location: variable item of type Item\n3 errors\n","instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n","Item.java":"\npublic class Item {\n    public int sellIn;\n    public int quality;\n    \n}\n"}